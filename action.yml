name: 'Black Code Format'
description: 'Format Python code using Black and provide PR comments with results'
author: 'Antonio González'

inputs:
  python-version:
    description: 'Python version to use'
    required: false
    default: '3.x'
  black-version:
    description: 'Black version to use'
    required: false
    default: '23.12.0'
  black-args:
    description: 'Black arguments to use'
    required: false
    default: '--check --verbose'
  github-token:
    description: 'GitHub token for commenting on PRs'
    required: true
    default: ${{ github.token }}
  paths:
    description: 'Paths to check (space-separated). Example: "src tests"'
    required: false
    default: '.'
  fail-on-error:
    description: 'Whether to fail the action if formatting issues are found'
    required: false
    default: 'true'
  comment-mode:
    description: 'Mode of commenting (append, replace or none)'
    required: false
    default: 'replace'

runs:
  using: "composite"
  steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}

    - name: Install Black
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install black==${{ inputs.black-version }}

    - name: Run Black
      id: black
      shell: bash
      run: |
        OUTPUT=$(black ${{ inputs.black-args }} ${{ inputs.paths }} 2>&1) || echo "::set-output name=black_failed::true"
        echo "$OUTPUT" > black_output.txt
        echo "$OUTPUT"

    - name: Create comment body
      if: github.event_name == 'pull_request'
      shell: bash
      run: |
        {
          echo "## Black Formatting Report"
          echo "\`\`\`"
          cat black_output.txt
          echo "\`\`\`"
          
          if [ "${{ steps.black.outputs.black_failed }}" = "true" ]; then
            echo -e "\n⚠️ Some files need formatting. Please run:"
            echo "\`\`\`bash"
            echo "pip install black==${{ inputs.black-version }}"
            echo "black ${{ inputs.paths }}"
            echo "\`\`\`"
          else
            echo -e "\n✅ All files are properly formatted!"
          fi
        } > comment.md

    - name: Find existing comment
      if: github.event_name == 'pull_request' && inputs.comment-mode == 'replace'
      uses: peter-evans/find-comment@v3
      id: find-comment
      with:
        issue-number: ${{ github.event.pull_request.number }}
        comment-author: 'github-actions[bot]'
        body-includes: '## Black Formatting Report'

    - name: Update or create comment
      if: github.event_name == 'pull_request'
      uses: peter-evans/create-or-update-comment@v4
      with:
        issue-number: ${{ github.event.pull_request.number }}
        body-file: comment.md
        edit-mode: ${{ inputs.comment-mode == 'replace' && 'replace' || 'append' }}
        comment-id: ${{ inputs.comment-mode == 'replace' && steps.find-comment.outputs.comment-id || '' }}
        token: ${{ inputs.github-token }}

    - name: Check Black result
      if: inputs.fail-on-error == 'true'
      shell: bash
      run: |
        if [ "${{ steps.black.outputs.black_failed }}" = "true" ]; then
          echo "Black found formatting issues"
          exit 1
        fi

branding:
  icon: 'code'
  color: 'black' 